// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: email_handler/mailbox.proto

package email_handler_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mailbox_GetMailbox_FullMethodName            = "/email_handler.Mailbox/GetMailbox"
	Mailbox_GetMailboxCredentials_FullMethodName = "/email_handler.Mailbox/GetMailboxCredentials"
	Mailbox_CreateMailbox_FullMethodName         = "/email_handler.Mailbox/CreateMailbox"
	Mailbox_UpdateMailbox_FullMethodName         = "/email_handler.Mailbox/UpdateMailbox"
	Mailbox_DeleteMailbox_FullMethodName         = "/email_handler.Mailbox/DeleteMailbox"
)

// MailboxClient is the client API for Mailbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailboxClient interface {
	GetMailbox(ctx context.Context, in *GetMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error)
	GetMailboxCredentials(ctx context.Context, in *GetMailboxCredentialsRequest, opts ...grpc.CallOption) (*MailboxCredentialResponse, error)
	CreateMailbox(ctx context.Context, in *CreateMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error)
	UpdateMailbox(ctx context.Context, in *UpdateMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error)
	DeleteMailbox(ctx context.Context, in *DeleteMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error)
}

type mailboxClient struct {
	cc grpc.ClientConnInterface
}

func NewMailboxClient(cc grpc.ClientConnInterface) MailboxClient {
	return &mailboxClient{cc}
}

func (c *mailboxClient) GetMailbox(ctx context.Context, in *GetMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MailboxResponse)
	err := c.cc.Invoke(ctx, Mailbox_GetMailbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) GetMailboxCredentials(ctx context.Context, in *GetMailboxCredentialsRequest, opts ...grpc.CallOption) (*MailboxCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MailboxCredentialResponse)
	err := c.cc.Invoke(ctx, Mailbox_GetMailboxCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) CreateMailbox(ctx context.Context, in *CreateMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MailboxResponse)
	err := c.cc.Invoke(ctx, Mailbox_CreateMailbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) UpdateMailbox(ctx context.Context, in *UpdateMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MailboxResponse)
	err := c.cc.Invoke(ctx, Mailbox_UpdateMailbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) DeleteMailbox(ctx context.Context, in *DeleteMailboxRequest, opts ...grpc.CallOption) (*MailboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MailboxResponse)
	err := c.cc.Invoke(ctx, Mailbox_DeleteMailbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailboxServer is the server API for Mailbox service.
// All implementations must embed UnimplementedMailboxServer
// for forward compatibility.
type MailboxServer interface {
	GetMailbox(context.Context, *GetMailboxRequest) (*MailboxResponse, error)
	GetMailboxCredentials(context.Context, *GetMailboxCredentialsRequest) (*MailboxCredentialResponse, error)
	CreateMailbox(context.Context, *CreateMailboxRequest) (*MailboxResponse, error)
	UpdateMailbox(context.Context, *UpdateMailboxRequest) (*MailboxResponse, error)
	DeleteMailbox(context.Context, *DeleteMailboxRequest) (*MailboxResponse, error)
	mustEmbedUnimplementedMailboxServer()
}

// UnimplementedMailboxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMailboxServer struct{}

func (UnimplementedMailboxServer) GetMailbox(context.Context, *GetMailboxRequest) (*MailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailbox not implemented")
}
func (UnimplementedMailboxServer) GetMailboxCredentials(context.Context, *GetMailboxCredentialsRequest) (*MailboxCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailboxCredentials not implemented")
}
func (UnimplementedMailboxServer) CreateMailbox(context.Context, *CreateMailboxRequest) (*MailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMailbox not implemented")
}
func (UnimplementedMailboxServer) UpdateMailbox(context.Context, *UpdateMailboxRequest) (*MailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailbox not implemented")
}
func (UnimplementedMailboxServer) DeleteMailbox(context.Context, *DeleteMailboxRequest) (*MailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMailbox not implemented")
}
func (UnimplementedMailboxServer) mustEmbedUnimplementedMailboxServer() {}
func (UnimplementedMailboxServer) testEmbeddedByValue()                 {}

// UnsafeMailboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailboxServer will
// result in compilation errors.
type UnsafeMailboxServer interface {
	mustEmbedUnimplementedMailboxServer()
}

func RegisterMailboxServer(s grpc.ServiceRegistrar, srv MailboxServer) {
	// If the following call pancis, it indicates UnimplementedMailboxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mailbox_ServiceDesc, srv)
}

func _Mailbox_GetMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).GetMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailbox_GetMailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).GetMailbox(ctx, req.(*GetMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_GetMailboxCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailboxCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).GetMailboxCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailbox_GetMailboxCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).GetMailboxCredentials(ctx, req.(*GetMailboxCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_CreateMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).CreateMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailbox_CreateMailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).CreateMailbox(ctx, req.(*CreateMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_UpdateMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).UpdateMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailbox_UpdateMailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).UpdateMailbox(ctx, req.(*UpdateMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_DeleteMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).DeleteMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailbox_DeleteMailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).DeleteMailbox(ctx, req.(*DeleteMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mailbox_ServiceDesc is the grpc.ServiceDesc for Mailbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mailbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email_handler.Mailbox",
	HandlerType: (*MailboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMailbox",
			Handler:    _Mailbox_GetMailbox_Handler,
		},
		{
			MethodName: "GetMailboxCredentials",
			Handler:    _Mailbox_GetMailboxCredentials_Handler,
		},
		{
			MethodName: "CreateMailbox",
			Handler:    _Mailbox_CreateMailbox_Handler,
		},
		{
			MethodName: "UpdateMailbox",
			Handler:    _Mailbox_UpdateMailbox_Handler,
		},
		{
			MethodName: "DeleteMailbox",
			Handler:    _Mailbox_DeleteMailbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email_handler/mailbox.proto",
}
